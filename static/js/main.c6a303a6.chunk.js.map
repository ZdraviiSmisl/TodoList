{"version":3,"sources":["Components/TodoList/TodoListHeader/TodoListHeader.module.css","Components/TodoList/TodoListTasks/TodoListTask/TodoListTask.module.css","Components/TodoList/TodoListFooter/TodoListFooter.module.css","Components/TodoList/TodoList.module.css","Components/TodoList/TodoListTasks/TodoListTasks.module.css","App.module.css","OutsideComponents/LocalStorage.js","Components/TodoList/TodoListHeader/TodoListHeader.jsx","Components/TodoList/TodoListTasks/TodoListTask/TodoListTask.jsx","Components/TodoList/TodoListTasks/TodoListTasks.jsx","Components/TodoList/TodoListFooter/TodoListFooter.jsx","Components/TodoList/TodoList.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","saveState","state","stateAsString","JSON","stringify","localStorage","setItem","TodoListHeader","error","title","inputEmptyDisable","onAddTaskClick","newTitle","setState","props","addTask","onAddText","e","currentTarget","value","onPressEnter","key","alert","render","className","style","todoListHeader","todoListHeaderTitle","todoListNewTaskForm","onKeyPress","onChange","type","placeholder","onClick","disabled","React","Component","TodoListTask","editMode","onIsDoneChanged","changeStatus","task","id","checked","activatedEditMode","deactivatedEditMode","onTitleChanged","changeTitle","clickForDel","removeTask","taskClass","this","isDone","todoListTask","done","autofocus","onBlur","priority","TodoListTasks","tasksElements","tasks","map","todoListTasks","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onClickIsHidden","onClickIsShow","classForAll","filterValue","filterActive","classForCompleted","classForActive","TodoList","nextTaskId","taskId","filterTasks","filter","t","newTask","newTasks","newFilterValue","changeTask","obj","getItem","parse","restoreState","Wrap","todoList","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.c6a303a6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoListHeader\":\"TodoListHeader_todoListHeader__2RNMM\",\"todoListHeaderTitle\":\"TodoListHeader_todoListHeaderTitle__2AkYX\",\"todoListNewTaskForm\":\"TodoListHeader_todoListNewTaskForm__1-UrT\",\"error\":\"TodoListHeader_error__UPzlX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoListTask\":\"TodoListTask_todoListTask__1_9cR\",\"done\":\"TodoListTask_done__3WQ7n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterActive\":\"TodoListFooter_filterActive__2kImf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrap\":\"TodoList_Wrap__2CKfj\",\"todoList\":\"TodoList_todoList__33CCz\",\"todoList-task\":\"TodoList_todoList-task__1RPKD\",\"done\":\"TodoList_done__1Oq0q\",\"filter-active\":\"TodoList_filter-active__Y8MuN\",\"error\":\"TodoList_error__1r7Z6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoListTasks\":\"TodoListTasks_todoListTasks__yAmFh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__cqxsi\"};","export const saveState = (state) => {\r\n    let stateAsString = JSON.stringify(state);\r\n    localStorage.setItem('our-state', stateAsString)\r\n};\r\n\r\nexport const restoreState = () => {\r\n    let state = {\r\n        tasks: [],\r\n        filterValue: 'All'\r\n    };\r\n    let stateAsString = localStorage.getItem('our-state');\r\n    if (stateAsString !== null) {\r\n        state = JSON.parse(stateAsString);\r\n    }\r\n    return state;\r\n};","import React from 'react';\r\nimport style from './TodoListHeader.module.css'\r\n\r\nclass TodoListHeader extends React.Component {\r\n    state = {\r\n        error: false,\r\n        title: '',\r\n        inputEmptyDisable: false\r\n    };\r\n    onAddTaskClick = () => {\r\n        let newTitle = this.state.title !== '' ? this.state.title : this.setState({inputEmptyDisable: true});\r\n        this.state.title = '';\r\n        if (newTitle === '') {\r\n            this.setState({error: true})\r\n        } else {\r\n            this.setState({error: false});\r\n            this.props.addTask(newTitle);\r\n        }\r\n    };\r\n    onAddText = (e) => {\r\n        this.setState({error: false, title: e.currentTarget.value, inputEmptyDisable: false});\r\n\r\n    };\r\n\r\n    onPressEnter = (e) => {\r\n        if (e.key === 'Enter') alert('ты клацнул по Enter');\r\n\r\n    };\r\n\r\n    render = () => {\r\n\r\n        return (\r\n\r\n            <div className={style.todoListHeader}>\r\n                <h3 className={style.todoListHeaderTitle}>What to Learn</h3>\r\n                <div className={style.todoListNewTaskForm}>\r\n                    <input onKeyPress={this.onPressEnter}\r\n                           onChange={this.onAddText}\r\n                           className={this.state.error ? style.error : ''}\r\n                           type=\"text\"\r\n                           placeholder=\"New task name\"\r\n                           value={this.state.title}/>\r\n                    <button onClick={this.onAddTaskClick} disabled={this.state.inputEmptyDisable}>Add</button>\r\n\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListHeader;\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport style from './TodoListTask.module.css';\r\n\r\nclass TodoListTask extends React.Component {\r\n    state = {\r\n        editMode: false\r\n    };\r\n    onIsDoneChanged = (e) => {\r\n\r\n        this.props.changeStatus(this.props.task.id, e.currentTarget.checked);\r\n    };\r\n    activatedEditMode = () => {\r\n        this.setState({editMode: true})\r\n    };\r\n    deactivatedEditMode = () => {\r\n        this.setState({editMode: true})\r\n    };\r\n    onTitleChanged = (e) => {\r\n        this.props.changeTitle(this.props.task.id, e.currentTarget.value);\r\n    };\r\n    clickForDel = () => {\r\n        this.props.removeTask(this.props.task.id);\r\n    };\r\n\r\n    render() {\r\n        let taskClass = this.props.task.isDone ? style.todoListTask + '' + style.done : style.todoListTask;\r\n        return (\r\n            <div className={taskClass}>\r\n                <input type='checkbox'\r\n                       checked={this.props.task.isDone}\r\n                       onChange={this.onIsDoneChanged}\r\n                />\r\n                {this.state.editMode ?\r\n                    <input/> : <span onClick={this.activatedEditMode}\r\n                                     autofocus={true}\r\n                                     onBlur={this.deactivatedEditMode}\r\n                                     onChange={this.onTitleChanged}>{this.props.task.id} :{this.props.task.title},</span>\r\n\r\n                }\r\n\r\n\r\n                <span> priority:{this.props.task.priority}</span>\r\n                <span><button onClick={this.clickForDel}>Del</button></span>\r\n\r\n            </div>\r\n\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListTask;\r\n\r\nTodoListTask.propTypes = {\r\n    tasks: PropTypes.string,\r\n    isDone: PropTypes.bool,\r\n    priority: PropTypes.string\r\n};","import React from 'react';\r\nimport TodoListTask from \"./TodoListTask/TodoListTask\";\r\nimport PropTypes from 'prop-types';\r\nimport style from './TodoListTasks.module.css'\r\n\r\nclass TodoListTasks extends React.Component {\r\n\r\n    render = () => {\r\n\r\n        let tasksElements = this.props.tasks.map(task =>\r\n\r\n            <TodoListTask\r\n                key={task.id}\r\n                task={task}\r\n                removeTask={this.props.removeTask}\r\n                changeStatus={this.props.changeStatus}\r\n                changeTitle={this.props.changeTitle}\r\n            />);\r\n\r\n\r\n        return (\r\n\r\n            <div className={style.todoListTasks}>\r\n                {tasksElements}\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListTasks;\r\n\r\nTodoListTasks.propTypes = {\r\n    tasks: PropTypes.array\r\n};\r\n\r\n/* title={task.title}\r\n          isDone={task.isDone}\r\n          priority={task.priority}*/","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport style from './TodoListFooter.module.css';\r\n\r\nclass TodoListFooter extends React.Component {\r\n    state = {\r\n        isHidden: false\r\n    };\r\n    onAllFilterClick = () => {\r\n        this.props.changeFilter('All')\r\n    };\r\n    onCompletedFilterClick = () => {\r\n        this.props.changeFilter('Completed')\r\n    };\r\n    onActiveFilterClick = () => {\r\n        this.props.changeFilter('Active')\r\n    };\r\n    onClickIsHidden = () => {\r\n        this.setState({isHidden: false})\r\n    };\r\n\r\n    onClickIsShow = () => {\r\n        this.setState({isHidden: true})\r\n\r\n    };\r\n    render = () => {\r\n\r\n        let classForAll = this.props.filterValue === 'All' ? style.filterActive : '';\r\n        let classForCompleted = this.props.filterValue === 'Completed' ? style.filterActive : '';\r\n        let classForActive = this.props.filterValue === 'Active' ? style.filterActive : '';\r\n        return (\r\n\r\n            <div className=\"todoList-footer\">\r\n                {!this.state.isHidden && <div>\r\n                    <button className={classForAll}\r\n                            onClick={this.onAllFilterClick}>All\r\n                    </button>\r\n                    <button className={classForCompleted}\r\n                            onClick={this.onCompletedFilterClick}>Completed\r\n                    </button>\r\n                    <button className={classForActive}\r\n                            onClick={this.onActiveFilterClick}>Active\r\n\r\n                    </button>\r\n                </div>}\r\n                {!this.state.isHidden && <span onClick={this.onClickIsShow}>hide</span>}\r\n                {this.state.isHidden && <span onClick={this.onClickIsHidden}>show</span>}\r\n\r\n            </div>\r\n\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListFooter;\r\n\r\nTodoListFooter.propTypes = {\r\n    filterValue: PropTypes.string\r\n};","import React from 'react';\r\nimport style from './TodoList.module.css';\r\nimport {saveState, restoreState} from './../../OutsideComponents/LocalStorage';\r\nimport TodoListHeader from './TodoListHeader/TodoListHeader';\r\nimport TodoListTasks from './TodoListTasks/TodoListTasks';\r\nimport TodoListFooter from './TodoListFooter/TodoListFooter';\r\n\r\nclass TodoList extends React.Component {\r\n\r\n\r\n    nextTaskId = 0;\r\n    \r\n    state = {\r\n        tasks: [\r\n            /* {id:0,title: \"JS\", isDone: true, priority: \"high\"},\r\n             {id:1,title: \"HTML\", isDone: true, priority: \"low\"},\r\n             {id:2,title: \"CSS\", isDone: true, priority: \"medium\"},\r\n             {id:3,title: \"REACT\", isDone: false, priority: \"high\"}*/\r\n        ],\r\n        filterValue: \"All\",\r\n\r\n    };\r\n\r\n    componentDidMount() {\r\n        let state = restoreState();\r\n        this.setState(state)\r\n    }\r\n    removeTask = (taskId) => {\r\n        let filterTasks = this.state.tasks.filter(\r\n            t => t.id !== taskId\r\n        );\r\n        this.setState({tasks: filterTasks}, () => saveState(this.state));\r\n    };\r\n    addTask = (newTitle) => {\r\n        let newTask = {\r\n            id: this.nextTaskId,\r\n            title: newTitle,\r\n            isDone: false,\r\n            priority: 'low'\r\n        };\r\n        this.nextTaskId++;\r\n        let newTasks = [...this.state.tasks, newTask];\r\n        this.setState({\r\n            tasks: newTasks\r\n        }, () => saveState(this.state));\r\n\r\n    };\r\n\r\n    changeFilter = (newFilterValue) => {\r\n        this.setState({\r\n            filterValue: newFilterValue\r\n        }, () => saveState(this.state))\r\n    };\r\n\r\n    changeStatus = (taskId, isDone) => {\r\n        this.changeTask(taskId, {isDone: isDone})\r\n\r\n    };\r\n    changeTitle = (taskId, newTitle) => {\r\n        this.changeTask(taskId, {title: newTitle})\r\n    };\r\n\r\n    changeTask = (taskId, obj) => {\r\n\r\n        let newTasks = this.state.tasks.map(t => {\r\n            if (t.id === taskId) {\r\n                return {...t, ...obj};\r\n            } else {\r\n                return t;\r\n            }\r\n        });\r\n        this.setState({\r\n\r\n                tasks: newTasks\r\n            }, () => saveState(this.state)\r\n        )\r\n    };\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className={style.Wrap}>\r\n                <div className={style.todoList}>\r\n                    <TodoListHeader addTask={this.addTask}/>\r\n\r\n                    <TodoListTasks\r\n                        removeTask={this.removeTask}\r\n                        changeTitle={this.changeTitle}\r\n                        changeStatus={this.changeStatus}\r\n                        tasks={this.state.tasks.filter(t => {\r\n                            switch (this.state.filterValue) {\r\n                                case 'Active':\r\n                                    return !t.isDone;\r\n                                case 'Completed':\r\n                                    return t.isDone;\r\n                                case 'All':\r\n                                    return true;\r\n                                default:\r\n                                    return true;\r\n                            }\r\n\r\n                        })}/>\r\n                    <TodoListFooter filterValue={this.state.filterValue}\r\n                                    changeFilter={this.changeFilter}/>\r\n\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default TodoList;","import React from 'react';\nimport TodoList from  './Components/TodoList/TodoList';\nimport style from './App.module.css'\nclass App extends React.Component {\n\n    render = () => {\n\n        return (\n\n            <div className={style.App}>\n        <TodoList/>\n            </div>\n\n\n    )\n        ;\n    };\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}